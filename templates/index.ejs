<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quiz Question Manager</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-5">

  <div class="container mx-auto">
    <h1 class="text-3xl font-bold text-center mb-5">Quiz Question Manager</h1>

    <!-- Add Question Button -->
    <button id="add-question-btn" class="bg-blue-500 text-white px-4 py-2 rounded-md mb-5 hover:bg-blue-600">
      <span class="text-lg">+</span> Add New Question
    </button>

    <!-- Question List -->
    <div id="question-list" class="space-y-4">
      <!-- Questions will be dynamically added here -->
    </div>
  </div>

  <!-- Modal (hidden by default) -->
  <div id="modal" class="fixed inset-0 bg-gray-500 bg-opacity-50 flex justify-center items-center z-50 hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg w-96">
      <h2 id="form-title" class="text-xl font-semibold mb-4">Add a New Question</h2>
      <form id="question-form" class="space-y-4">
        <div>
          <label for="question" class="block text-sm font-medium text-gray-700">Question</label>
          <input type="text" id="question" name="question" class="mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
        </div>
        <div>
          <label for="options" class="block text-sm font-medium text-gray-700">Options (comma-separated)</label>
          <input type="text" id="options" name="options" class="mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
        </div>
        <div>
          <label for="answer" class="block text-sm font-medium text-gray-700">Answer</label>
          <input type="text" id="answer" name="answer" class="mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
        </div>
        <div>
          <label for="image" class="block text-sm font-medium text-gray-700">Image (optional)</label>
          <input type="file" id="image" name="image" accept="image/*" class="mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
        </div>
        <div class="flex justify-between">
          <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">Save</button>
          <button type="button" id="cancel-btn" class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // const apiUrl = 'http://localhost:3000'; // Update this with your API base URL
    const questionList = document.getElementById('question-list');
    const formTitle = document.getElementById('form-title');
    const questionForm = document.getElementById('question-form');
    const cancelBtn = document.getElementById('cancel-btn');
    const modal = document.getElementById('modal');
    const addQuestionBtn = document.getElementById('add-question-btn');

    let editingQuestionId = null;

    // Fetch and display questions
    async function fetchQuestions() {
      const response = await fetch(`/questions/`);
      const data = await response.json();
      displayQuestions(data);
    }

    // Display questions in the list
    function displayQuestions(questions) {
      questionList.innerHTML = '';
      questions.forEach(question => {
        const questionItem = document.createElement('div');
        questionItem.className = 'bg-white p-4 rounded-lg shadow-md flex justify-between items-center';
        questionItem.innerHTML = `
          <div>
            <p class="font-bold">${question.question}</p>
            <p class="text-gray-600">Options: ${question.options}</p>
            <p class="text-green-500">Answer: ${question.answer}</p>
          </div>
          <div class="flex space-x-2">
            <button class="bg-yellow-500 text-white px-3 py-1 rounded-md hover:bg-yellow-600" onclick="editQuestion('${question._id}', '${question.question}', '${question.options}', '${question.answer}')">Edit</button>
            <button class="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600" onclick="deleteQuestion('${question._id}')">Delete</button>
          </div>
        `;
        questionList.appendChild(questionItem);
      });
    }

    // Add or edit a question
    questionForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(questionForm);

      if (!formData.get('question') || !formData.get('options') || !formData.get('answer')) {
        alert('All fields are required!');
        return;
      }

      const url = editingQuestionId
        ? `/questions/edit/${editingQuestionId}`
        : `/questions/add`;

      const method = editingQuestionId ? 'PUT' : 'POST';

      await fetch(url, {
        method,
        body: formData,
      });

      editingQuestionId = null;
      questionForm.reset();
      fetchQuestions();
      closeModal();
    });

    // Edit a question
    window.editQuestion = (id, question, options, answer) => {
      editingQuestionId = id;
      document.getElementById('question').value = question;
      document.getElementById('options').value = options;
      document.getElementById('answer').value = answer;
      formTitle.textContent = 'Edit Question';
      cancelBtn.classList.remove('hidden');
      openModal();
    };

    // Cancel editing
    cancelBtn.addEventListener('click', closeModal);

    // Delete a question
    window.deleteQuestion = async (id) => {
      if (confirm('Are you sure you want to delete this question?')) {
        await fetch(`/questions/delete/${id}`, { method: 'DELETE' });
        fetchQuestions();
      }
    };

    // Open modal
    addQuestionBtn.addEventListener('click', openModal);

    function openModal() {
      modal.classList.remove('hidden');
    }

    // Close modal
    function closeModal() {
      modal.classList.add('hidden');
      questionForm.reset();
      editingQuestionId = null;
      formTitle.textContent = 'Add a New Question';
      cancelBtn.classList.add('hidden');
    }

    // Initial fetch
    fetchQuestions();
  </script>
</body>
</html>
